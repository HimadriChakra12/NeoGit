*neogit.txt*  A Git interface for Neovim, inspired by Magit
- Git (tested with 2.30

==============================================================================
CONTENTS                                                       *neogit-contents*

    1. Introduction ................ |neogit-introduction|
    2. Requirements ................ |neogit-requirements|
    3. Installation ................ |neogit-installation|
    4. Commands .................... |neogit-commands|
    5. Mappings .................... |neogit-mappings|
    6. Configuration ............... |neogit-configuration|
    7. License ..................... |neogit-license|

==============================================================================
1. INTRODUCTION                                           *neogit-introduction*

NeoGit is a work-in-progress Magit clone for Neovim. It aims to provide a 
convenient and powerful Git interface within your favorite editor.

==============================================================================
2. REQUIREMENTS                                           *neogit-requirements*

- Neovim >= 0.7.0
- Git (tested with 2.30+)
- plenary.nvim (https://github.com/nvim-lua/plenary.nvim)
- Optionally: telescope.nvim for enhanced file picking

==============================================================================
3. INSTALLATION                                           *neogit-installation*

Using packer.nvim:
>
  use {
    'username/neogit',
    requires = {
      'nvim-lua/plenary.nvim',
      'nvim-telescope/telescope.nvim', -- Optional
    }
  }
<

Using vim-plug:
>
  Plug 'nvim-lua/plenary.nvim'
  Plug 'nvim-telescope/telescope.nvim' " Optional
  Plug 'username/neogit'
<

==============================================================================
4. COMMANDS                                                   *neogit-commands*

                                                                     *:NeoGit*
:NeoGit          Open the main NeoGit status buffer, showing current Git
                 repository status.

                                                                *:NeoGitCommit*
:NeoGitCommit    Start a commit dialog to commit staged changes.

                                                                  *:NeoGitPush*
:NeoGitPush      Push current branch to remote repository.

                                                                  *:NeoGitPull*
:NeoGitPull      Pull changes from remote repository.

                                                                   *:NeoGitLog*
:NeoGitLog       Show commit history log.

==============================================================================
5. MAPPINGS                                                   *neogit-mappings*

Recommended mappings to add to your configuration:
>
  vim.api.nvim_set_keymap('n', '<leader>gs', ':NeoGit<CR>', 
                          { noremap = true, silent = true })
  vim.api.nvim_set_keymap('n', '<leader>gc', ':NeoGitCommit<CR>', 
                          { noremap = true, silent = true })
  vim.api.nvim_set_keymap('n', '<leader>gp', ':NeoGitPush<CR>', 
                          { noremap = true, silent = true })
  vim.api.nvim_set_keymap('n', '<leader>gl', ':NeoGitLog<CR>', 
                          { noremap = true, silent = true })
<

In the NeoGit status buffer:

  s               Stage file/hunk under cursor
  u               Unstage file/hunk under cursor
  c               Commit staged changes
  p               Push to remote
  f               Fetch from remote
  r               Pull (rebase) from remote
  b               Branch operations menu
  z               Stash operations menu
  ?               Show help
  q               Close NeoGit buffer

In the commit buffer:

  <C-c><C-c>      Submit commit
  <C-c><C-k>      Cancel commit

In history log and diff views:

  q               Close buffer
  d               (In log view) Show diff of commit under cursor

==============================================================================
6. CONFIGURATION                                         *neogit-configuration*

NeoGit can be configured in your init.lua:
>
  require('neogit').setup({
    -- Default values
    disable_signs = false,        -- Disable use of signs
    disable_hint = false,         -- Disable hint in status buffer
    disable_context_highlighting = false, -- Disable context highlighting
    status = {
      recent_commit_count = 10,   -- Number of recent commits to show
    },
    auto_refresh = true,          -- Auto refresh status buffer
    integrations = {
      telescope = true,           -- Use telescope if available
      diffview = false,           -- Use diffview if available
    },
    sections = {
      -- Configuration for different sections in the status buffer
      untracked = {
        folded = false,
      },
      unstaged = {
        folded = false,
      },
      staged = {
        folded = false,
      },
      stashes = {
        folded = true,
      },
      unpulled = {
        folded = true,
      },
      unmerged = {
        folded = false,
      },
      recent = {
        folded = true,
      },
    },
  })
<

==============================================================================
7. LICENSE                                                   *neogit-license*

MIT License

Copyright (c) 2025 Author

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

vim:tw=78:ts=8:ft=help:norl:
